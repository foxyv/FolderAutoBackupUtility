/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FolderBackupUI.java
 *
 * Created on May 18, 2012, 1:24:46 PM
 */
package folderautobackuputility.View;

import folderautobackuputility.Controller.FolderList;
import folderautobackuputility.Model.FbcFileFilter;
import folderautobackuputility.Model.VernaFolder;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author Sweord
 */
public class FolderBackupUI extends javax.swing.JFrame {
    
    FbcFileFilter fbc = new FbcFileFilter();
    FolderList config = new FolderList();
    final static long serialVersionUID = 124891l;
    final static String LAST_CONFIG = "lastFolders.fbc";
    File CurrentConfigurationTarget;
    
    /**
     * Creates new form FolderBackupUI
     */
    public FolderBackupUI() {
        initComponents();
        CurrentConfigurationTarget = new File(LAST_CONFIG);

        //If the file doesn't exist try to make a new one
        if (!CurrentConfigurationTarget.exists()) {
            try {
                CurrentConfigurationTarget.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(FolderBackupUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        loadLastFolderList(CurrentConfigurationTarget.getPath());
        refreshFolderList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        folderList = new javax.swing.JList();
        ShowFolderButton = new javax.swing.JButton();
        AddFolderButton = new javax.swing.JButton();
        RemoveFolderButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FolderAutoBackupUtility v0.1");
        setBackground(new java.awt.Color(204, 204, 255));
        setResizable(false);

        jScrollPane1.setViewportView(folderList);

        ShowFolderButton.setBackground(new java.awt.Color(153, 153, 255));
        ShowFolderButton.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        ShowFolderButton.setText("Show Folder Status");
        ShowFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowFolderButtonActionPerformed(evt);
            }
        });

        AddFolderButton.setBackground(new java.awt.Color(153, 153, 255));
        AddFolderButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        AddFolderButton.setText("Add Folder");
        AddFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFolderButtonActionPerformed(evt);
            }
        });

        RemoveFolderButton.setBackground(new java.awt.Color(153, 153, 255));
        RemoveFolderButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        RemoveFolderButton.setText("Remove Folder");
        RemoveFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveFolderButtonActionPerformed(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(153, 153, 255));
        ExitButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(OpenMenuItem);

        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Save As");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RemoveFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ShowFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RemoveFolderButton)
                            .addComponent(ExitButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFolderButtonActionPerformed
        
        
        config.addFolderDialog(this);

        //Update the config file
        config.writeToFile(CurrentConfigurationTarget);

        //Make sure the model for folderList is folderListModel
        folderList.setModel(config.getFolderListModel());

    }//GEN-LAST:event_AddFolderButtonActionPerformed

    private void ShowFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowFolderButtonActionPerformed
        // TODO add your handling code here:
        VernaFolder folderInQuestion = (VernaFolder) folderList.getSelectedValue();
        if (folderInQuestion != null) {
            FolderBackupInfo statusScreen = new FolderBackupInfo(folderInQuestion);
            statusScreen.setVisible(true);
        }
    }//GEN-LAST:event_ShowFolderButtonActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed

        //Check to see if the user wants to save this backup information
        Object[] options = {"Yes", "No", "Cancel"};
        int choice = (JOptionPane.showOptionDialog(this, "Save before opening?", "Wait!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null));
        System.out.println(choice);
        if (choice == 2) {
            return;
        }
        if (choice == 0) {
            boolean escape = false;
            while (!escape) {
                switch (config.performSaveAsDialog(this)) {
                    case FolderList.SUCCESS:

                        System.out.println("Save Success?");
                        escape = true;
                        break;
                    case FolderList.CANCELLED:
                        System.out.println("Save Cancelled?");
                        return;

                }

            }
        }

        //Initialize a fileChooser
        JFileChooser rawr = new JFileChooser();

        //Get a file from the user
        rawr.setFileSelectionMode(JFileChooser.FILES_ONLY);
        rawr.setCurrentDirectory(new File("./"));

        rawr.setFileFilter(fbc);
        rawr.showDialog(this, "Open");
        if (rawr.getSelectedFile() != null) {
            CurrentConfigurationTarget = rawr.getSelectedFile();
            config.readFromFile(CurrentConfigurationTarget);
            this.refreshFolderList();
        }

    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        config.writeToFile(CurrentConfigurationTarget);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        SaveAs();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void RemoveFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveFolderButtonActionPerformed
//Check to make sure our folderListModel is initialized

        int choice = JOptionPane.showConfirmDialog(this, "Do you really want to remove this folder from your backup list?");

        if (choice == JOptionPane.OK_OPTION) {
            config.removeFolder((VernaFolder) folderList.getSelectedValue());
            config.writeToFile(CurrentConfigurationTarget);
            refreshFolderList();
        }

    }//GEN-LAST:event_RemoveFolderButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FolderBackupUI().setVisible(true);
            }
        });
    }

    private void loadLastFolderList(String configFilePath) {
        try {
            //Initialize config
            CurrentConfigurationTarget = new File(LAST_CONFIG);
            config = new FolderList();
            config.readFromFile(CurrentConfigurationTarget);

        } catch (Exception ex) {
            Logger.getLogger(FolderBackupUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public int SaveAs() {
        return config.performSaveAsDialog(this);
    }

    ;

    private void refreshFolderList() {
        if (config != null) {
            folderList.setModel(config.getFolderListModel());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddFolderButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JButton RemoveFolderButton;
    private javax.swing.JButton ShowFolderButton;
    private javax.swing.JList folderList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
